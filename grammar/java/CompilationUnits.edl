module java/CompilationUnits

imports
  java/ClassifierDeclarations   %% ClassifierDeclaration
  java/Annotations              %% Annotation
  java/Names                    %% PackageName

import declarations
	de.uni_koblenz.jgralab.TemporaryVertex;

exports
  sorts
    CompilationUnit

  context-free syntax

    @Symboltable{importedPackages, importedClassifiers}
    rule #{statements = 0;}
          $ = SourceFile();
          $.path = file();
          $packageDecl = {return defaultPackage;};
          {curQName = "";}#

         (#{isPackageDeclaration = true;}#
          PackageDeclaration
          #{isPackageDeclaration = false;}
           $packageDecl = $0;
           {curQName = #$0.qualifiedName#.toString();
            curPkgQName = curQName;}#)?

          (ImportDeclaration
           #{if (#$0# != null) { // There's no $0 for static imports
              createEdge("Imports", #$#, #$0#);
            }};#
           )*

                                 %% TODO: Comment in, once we create Classifier vertices
          (ClassifierDeclaration %% #Defines($,$0);
                                 %% ContainsType($packageDecl, $0);#
                                  )*
         -> CompilationUnit #$.lines = {return currentElement.getLastLine();};#

    %% PackageDeclaration
    rule Annotation* "package" PackageName ";"
         -> PackageDeclaration
            #$=name2Package.use(lexem($2).replaceAll("\\s+", ""));#

    %% ImportDeclaration
    rule "import" TypeName ";"
         #$ = {return resolveType(#lexem($1)#, currentElement);};
          $.qualifiedName = lexem($1);
          importedClassifiers.declare($.name, $);#
         -> ImportDeclaration
    rule "import" PackageName       "." "*" ";"  -> ImportDeclaration
      #$ = name2Package.useOrDeclare(lexem($1));
       $.qualifiedName = lexem($1);
       importedPackages.declare(lexem($1), $);#
    rule "import" "static" TypeName "." Id  ";"  -> ImportDeclaration
    rule "import" "static" TypeName "." "*" ";"  -> ImportDeclaration
