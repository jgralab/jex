module java/ClassifierDeclarations
imports
  java/Modifiers     %% Modifier
  java/Identifiers   %% Id
  java/Names         %% TypeSpec, TypeParams
  java/Members       %% Member, InitializerBlock, EnumConstant, AnnotationField

global actions
  pattern _ (1..*) Id _ (0..*) -> _
    #name2Member.namespace = $;
     $.modifiers = $mods;
     $.name = lexem($2);
     $.qualifiedName = {return packagePrefix;};
     name2NamedElement.declare($.qualifiedName, $);
     {packagePrefix = (String) #$packagePrefix#;}#

 @Before
 pattern _ (1..*) Id _ (0..*) -> _
         #$mods = set();
          $packagePrefix = {return packagePrefix;};#

exports
  sorts
    ClassDeclaration
    InterfaceDeclaration
    EnumDeclaration
    AnnotationDeclaration
    ClassifierDeclaration

  context-free syntax

    %% Classes
    @Symboltable{name2Member}
    rule ((Modifier #$mods.add($0);#)|Annotation)* "class" Id
         #$=Class();
          {packagePrefix += (packagePrefix.isEmpty()? "" : ".") + #lexem($2)#;}#
         TypeParams?
         ("extends" TypeSpec
          #$extType = {return resolveType(#lexem($1)#, currentElement);};
           Extends($, $extType);#)?
         ("implements" {(TypeSpec
          #$impledIFace = {return resolveType(#lexem($0)#, currentElement);};
           Implements($, $impledIFace);#
          ) ","}+)?
         ClassifierBody -> ClassDeclaration

    %% Enums
    @Symboltable{name2Member}
    rule ((Modifier #$mods.add($0);#)|Annotation)* "enum" Id
         #$=Enum();
          {packagePrefix += (packagePrefix.isEmpty()? "" : ".") + #lexem($2)#;}#        
         ("implements" {(TypeSpec
          #$impledIFace = {return resolveType(#lexem($0)#, currentElement);};
           Implements($, $impledIFace);#           
          ) ","}+)?
         EnumBody -> EnumDeclaration
    rule "{" EnumConstant+ Member* "}" ";"? -> EnumBody

    %% Interfaces
    @Symboltable{name2Member}
    rule ((Modifier #$mods.add($0);#)|Annotation)* "interface" Id
         #$=Interface();
          {packagePrefix += (packagePrefix.isEmpty()? "" : ".") + #lexem($2)#;}#        
         TypeParams?
         ("extends" {(TypeSpec
          #$extType = {return resolveType(#lexem($0)#, currentElement);};
           Extends($, $extType);#
          ) ","}+)?
         ClassifierBody -> InterfaceDeclaration


    %% Annotations
    @Symboltable{name2Member}
    rule ((Modifier #$mods.add($0);#)|Annotation)* "@interface" Id
         #$=Annotation();
          {packagePrefix += (packagePrefix.isEmpty()? "" : ".") + #lexem($2)#;}#
         AnnotationBody -> AnnotationDeclaration
    rule "{" AnnotationField* "}" ";"? -> AnnotationBody

    rule ClassDeclaration      -> ClassifierDeclaration
    rule EnumDeclaration       -> ClassifierDeclaration
    rule InterfaceDeclaration  -> ClassifierDeclaration
    rule AnnotationDeclaration -> ClassifierDeclaration

    rule ClassifierDeclaration -> Member

    rule "{" (Member | InitializerBlock)* "}" ";"? -> ClassifierBody
