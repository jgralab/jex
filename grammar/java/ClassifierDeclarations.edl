module java/ClassifierDeclarations
imports
  java/Modifiers     %% Modifier
  java/Identifiers   %% Id
  java/Types         %% ClassifierType, TypeParam
  java/Members       %% Member, InitializerBlock, EnumConstants, AnnotationElementDecl

global actions
  pattern _ (1..*) Id _ (0..*) -> _
    #$.modifiers = $mods;
     {curQName = (String) #$prevQName#;}#

 @Before
 pattern _ (1..*) Id _ (0..*) -> _
         #$mods = set();
          $prevQName = {return curQName;};#

exports
  sorts
    ClassDeclaration
    InterfaceDeclaration
    EnumDeclaration
    AnnotationDeclaration
    ClassifierDeclaration
	ClassifierBody

  context-free syntax

    %% Classes
    @Symboltable{typeParams}
    rule ((Modifier #$mods.add($0);#)|Annotation)* "class" Id
         #{curQName += (curQName.isEmpty()? "" : ".") + #lexem($2)#;}
          $ = {return resolveClassifier(#$2#, currentElement, "Class");};#
         ("<" #{initTypeParamsSymbolTable(currentElement, false);}#
          {(TypeParam #HasTypeParam($, $0);#) ","}+ ">")?
         ("extends" ClassifierType #Extends($, $1);#)?
         ("implements" {(ClassifierType #Implements($, $0);#) ","}+)?
         ClassifierBody -> ClassDeclaration

    %% Enums
    rule ((Modifier #$mods.add($0);#)|Annotation)* "enum" Id
         #{curQName += (curQName.isEmpty()? "" : ".") + #lexem($2)#;}
          $ = {return resolveClassifier(#$2#, currentElement, "Enum");};#
         ("implements" {(ClassifierType #Implements($, $0);#) ","}+)?
         EnumBody -> EnumDeclaration
    rule "{" EnumConstants
             %% All kinds of Members except for EnumConstants may follow
             (";" (FieldDeclaration |
              MethodDeclaration | ConstructorDeclaration |
              InitializerBlock |
              ClassifierDeclaration  ";"* )* )? "}" -> EnumBody

    %% Interfaces
    @Symboltable{typeParams}
    rule ((Modifier #$mods.add($0);#)|Annotation)* "interface" Id
         #{curQName += (curQName.isEmpty()? "" : ".") + #$2#;}
          $ = {return resolveClassifier(#$2#, currentElement, "Interface");};#
         ("<" #{initTypeParamsSymbolTable(currentElement, false);}#
          {(TypeParam #HasTypeParam($, $0);#) ","}+ ">")?
         ("extends" {(ClassifierType #Extends($, $0);#) ","}+)?
         ClassifierBody -> InterfaceDeclaration

    %% Annotations
    rule ((Modifier #$mods.add($0);#)|Annotation)* "@interface" Id
         #{curQName += (curQName.isEmpty()? "" : ".") + #lexem($2)#;}
          $ = {return resolveClassifier(#$2#, currentElement, "Annotation");};#
         AnnotationBody -> AnnotationDeclaration
    %% Yes, there may be enums in annotations
    rule "{" (AnnotationElementDecl | ClassifierDeclaration | FieldDeclaration ";"* )* "}" -> AnnotationBody

    rule ClassDeclaration      -> ClassifierDeclaration #$ = $0;#
    rule EnumDeclaration       -> ClassifierDeclaration #$ = $0;#
    rule InterfaceDeclaration  -> ClassifierDeclaration #$ = $0;#
    rule AnnotationDeclaration -> ClassifierDeclaration #$ = $0;#

    rule ClassifierDeclaration -> Member
         #$ = $0;
          $parent = {return resolveClassifier(curQName, currentElement);};
          DeclaresNestedClassifier($parent, $);#

    rule "{" (Member | InitializerBlock ";"* )* "}" -> ClassifierBody
