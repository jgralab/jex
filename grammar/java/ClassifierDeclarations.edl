module java/ClassifierDeclarations
imports
  java/Modifiers     %% Modifier
  java/Identifiers   %% Id
  java/Names         %% TypeSpec, TypeParams
  java/Members       %% Member, InitializerBlock, EnumConstant, AnnotationField

exports
  sorts
    ClassDeclaration
    InterfaceDeclaration
    EnumDeclaration
    AnnotationDeclaration
    ClassifierDeclaration

  context-free syntax

    @Symboltable{name2Member}
    rule #$mods = set();#
         ((Modifier #$mods.add($0);#)|Annotation)* "class" Id
         #$=Class();
          name2Member.namespace = $;
          $.modifiers = $mods;
          $.name = lexem($2);
          $packagePrefix = {return packagePrefix;};
          {packagePrefix += (packagePrefix.isEmpty()? "" : ".") + #$.name#;}
          $.qualifiedName = {return packagePrefix;};
          name2NamedElement.declare($.qualifiedName, $);#
         TypeParams?
         ("extends" TypeSpec
          #$extType = {return resolveType(#lexem($1)#, currentElement);};
           Extends($, $extType);#)?
         ("implements" {(TypeSpec
          #$impledIFace = {return resolveType(#lexem($0)#, currentElement);};
           {((TemporaryVertex) #$impledIFace#).setPreliminaryType(getVertexClass("Interface"));};
           Implements($, $impledIFace);#
          ) ","}+)?
         ClassifierBody -> ClassDeclaration
         #{packagePrefix = (String) #$packagePrefix#;}#

    rule (Modifier|Annotation)* "enum" Id
         ("implements" {TypeSpec ","}+)? EnumBody -> EnumDeclaration
    rule "{" EnumConstant+ Member* "}" ";"? -> EnumBody

    rule (Modifier|Annotation)* "interface" Id TypeParams?
         ("extends" {TypeSpec ","}+)? ClassifierBody -> InterfaceDeclaration

    rule (Modifier|Annotation)* "@interface" Id AnnotationBody -> AnnotationDeclaration
    rule "{" AnnotationField* "}" ";"? -> AnnotationBody

    rule ClassDeclaration      -> ClassifierDeclaration
    rule EnumDeclaration       -> ClassifierDeclaration
    rule InterfaceDeclaration  -> ClassifierDeclaration
    rule AnnotationDeclaration -> ClassifierDeclaration

    rule ClassifierDeclaration -> Member

    rule "{" (Member | InitializerBlock)* "}" ";"? -> ClassifierBody
