module java/Main
schema de.uni_koblenz.simple_java.schema.JavaSchema

imports
  java/CompilationUnits   %% CompilationUnit
  java/WhiteSpace
  java/Comments

symbol tables
  name2Package<Package>
  name2NamedElement<NamedElement>
  name2Member<Member<--Declares>:Type
  simple2QName<Classifier>

default values
  Imports.lineNo = line(omega);
  Defines.lineNo = line(omega);

import declarations
  java.util.List;
  de.uni_koblenz.jgralab.TemporaryVertex;
  de.uni_koblenz.edl.parser.Position;

user code{
  private Vertex defaultPackage;
	
  {
    defaultPackage = createVertex("Package", new Position());
    defaultPackage.setAttribute("name","");
    defaultPackage.setAttribute("qualifiedName","");
  }
	
  private boolean isPackageDeclaration = false;
  private String packagePrefix;
  private int statements = 0;

  @SuppressWarnings("unchecked")
  @Override
  public void finalize() {
    List<TemporaryVertex> tempVertices = (List<TemporaryVertex>)
      #name2NamedElement.getTemporaryVertices()#;
    for (TemporaryVertex tempVert: tempVertices) {
      tempVert.bless(getVertexClass("Class"));
    }
    List<TemporaryVertex> tempPackages = (List<TemporaryVertex>)
      #name2Package.getTemporaryVertices()#;
    for (TemporaryVertex tempPackage: tempPackages) {
      tempPackage.bless(getVertexClass("Package"));
    }
    for (Vertex tmp : getGraph().vertices(graph.getGraphClass().getTemporaryVertexClass())) {
      System.out.println("Left over TemporaryVertex: " + tmp);
    }
  }

  public static String stripTypeParams(Object typeSpec) {
    String ts = (String) typeSpec;
    int idx = ts.indexOf('<');
    if (idx != -1)
      ts = ts.substring(0, idx);
    // System.out.println("Stripped TypeSpec " + typeSpec + " to " + ts);
    return ts;
  }

  // Rips out the simple name of a qualified name, possibly including type parameters
  public static String getSimpleName(Object qn) {
    String qname = stripTypeParams(qn);
    int idx = qname.lastIndexOf('.');
    if (idx != -1)
      qname = qname.substring(idx + 1);
    // System.out.println("Stripped QName " + qn + " to simple name " + qname);
    return qname;
  }

  public static boolean isQualified(Object qn) {
    return ((String) qn).indexOf('.') != -1;
  }
}
exports
  context-free start-symbols CompilationUnit
