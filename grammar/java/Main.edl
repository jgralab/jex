module java/Main
schema de.uni_koblenz.jgralab.jex.schema.JavaSchema

imports
  java/CompilationUnits   %% CompilationUnit
  java/WhiteSpace
  java/Comments

symbol tables
  name2Package<Package>
  name2NamedElement<NamedElement>
  importedPackages<Package>             %% QName
  importedClassifiers<Classifier>       %% SimpleName
  importedClassifiersQN<Classifier>     %% QName
  typeParams<TypeParameter>

default values
  Imports.lineNo = line(omega);
  Defines.lineNo = line(omega);

import declarations
  java.util.List;
  java.util.LinkedList;
  java.util.Map;
  java.util.HashMap;
  java.lang.reflect.Modifier;
  de.uni_koblenz.jgralab.jex.schema.Modifiers;
  de.uni_koblenz.jgralab.JGraLab;
  de.uni_koblenz.jgralab.GraphElement;
  de.uni_koblenz.jgralab.TemporaryVertex;
  de.uni_koblenz.jgralab.TemporaryEdge;
  de.uni_koblenz.jgralab.exception.TemporaryGraphElementException;
  de.uni_koblenz.jgralab.EdgeDirection;
  de.uni_koblenz.jgralab.schema.EdgeClass;
  de.uni_koblenz.edl.parser.Position;
  de.uni_koblenz.edl.parser.stack.elements.StackElement;
  org.pcollections.PSet;


user code {
    private Vertex defaultPackage;

    {
        defaultPackage = createVertex("Package", new Position());
        defaultPackage.setAttribute("name","");
        defaultPackage.setAttribute("qualifiedName","");
    }

    private Map<String, Vertex> primTypes = new HashMap<String, Vertex>();
    {
        for (String n : new String[] {"boolean", "char", "byte", "short",
                                      "int", "long", "float", "double", "void"}) {
            Vertex p = getGraph().createVertex(getVertexClass("PrimitiveType"));
            p.setAttribute("qualifiedName", n);
            p.setAttribute("name", n);
            p.setAttribute("type",
                de.uni_koblenz.jgralab.jex.schema.PrimitiveTypes.valueOf(n.toUpperCase()));
            primTypes.put(n, p);
        }
    }

    private boolean isPackageDeclaration = false;
    // The qname of the element we are currently parsing (a Classifier)
    private String curQName;
    // The qname of the current package
    private String curPkgQName;

    @SuppressWarnings("unchecked")
    @Override
    public void finalize() {
        List<TemporaryVertex> tempVertices = (List<TemporaryVertex>)
            #name2NamedElement.getTemporaryVertices()#;
        for (TemporaryVertex tempVert: tempVertices) {
            if (!tempVert.isValid()) continue;
            if (tempVert.getPreliminaryType() != null
                  && !tempVert.getPreliminaryType().isAbstract()) {
                blessTemporaryVertex(tempVert, tempVert.getPreliminaryType());
            } else {
                blessTemporaryVertex(tempVert, getVertexClass("Class"));
            }
        }

        VertexClass tvc = getGraph().getGraphClass().getTemporaryVertexClass();
        EdgeClass tec = getGraph().getGraphClass().getTemporaryEdgeClass();

        List<TemporaryVertex> tempPackages = (List<TemporaryVertex>)
            #name2Package.getTemporaryVertices()#;
        for (TemporaryVertex tempPackage: tempPackages) {
            if (!tempPackage.isValid()) continue;
            blessTemporaryVertex(tempPackage, getVertexClass("Package"));
        }

        List<GraphElement> temps = new LinkedList<GraphElement>(); 
        for (Vertex tmp : getGraph().vertices(tvc)) {
            System.out.println("Left over TemporaryVertex: " + tmp);
            temps.add(tmp);
        }
        for (Edge tmp : getGraph().edges(tec)) {
            System.out.println("Left over TemporaryEdge: " + tmp);
            System.out.println("  alpha: " + tmp.getAlpha());
            System.out.println("  omega: " + tmp.getOmega());
            temps.add(tmp);
        }
        for (GraphElement e : temps) {
            if (e.isValid()) e.delete();
        }
    }

    private void initTypeParamsSymbolTable(StackElement ce, boolean method) {
        char[] content = getFileContent();
        int i = ce.getOffset() + 1;
        int start = i;
        int nesting = 1;
        boolean inName = true;
        List<String> tps = new LinkedList<String>();
        while (true) {
            char c = content[i];
            if (inName && (c == '>' || Character.isWhitespace(c) || c == ',')) {
                inName = false;
                tps.add(String.valueOf(content, start, i - start).trim());
            }

            if (c == '<') {
                nesting++;
            } else if (c == '>') {
                nesting--;
            } else if ((c == ',') && (nesting == 1)) {
                start = ++i;
                inName = true;
            }
            if (nesting == 0) break;
            i++;
        }

        if (tps.isEmpty()) {
            throw new RuntimeException("No type parameters found tho there should be some!");
        }

        String prefix = curQName + ".";
        if (method) {
            int lastSpace = i;
            while (true) {
                char c = content[i];
                if (c == '(') break;
                else if (Character.isWhitespace(c)) lastSpace = i;
                i++;
            }
            prefix += String.valueOf(content, lastSpace + 1, i - lastSpace - 1);
        }

        SymbolTableStack stck = (SymbolTableStack) #typeParams#;
        for (String tp : tps) {
            Vertex tpv = createVertex(getVertexClass("TypeParameter"), ce.getPosition());
            tpv.setAttribute("name", tp);
            if (method) {
                tpv.setAttribute("qualifiedName", prefix + "|" + tp);
            } else {
                tpv.setAttribute("qualifiedName", prefix + tp);
            }
            stck.declare(tp, tpv);
        }
    }

    private Vertex getTypeOfTypedElement(Vertex v) {
        EdgeClass ht = getEdgeClass("HasType");
        for (Edge e : v.incidences(EdgeDirection.OUT)) {
            if (e.isInstanceOf(ht) ||
                (e.isTemporary() &&
                 (((TemporaryEdge)e).getPreliminaryType() == ht ||
                  ((TemporaryEdge)e).getPreliminaryType().isSubClassOf(ht)))) {
                return e.getOmega();
            }
        }
        throw new RuntimeException(v + " has no type associated!");
    }

    private void recalcMethodTypeParamQNames(Object theMethodVertex) {
        Vertex m = (Vertex) theMethodVertex;
        StringBuilder sb = new StringBuilder();
        sb.append('(');
        boolean first = true;
        for (Vertex param : m.adjacences("params")) {
            Vertex pt = getTypeOfTypedElement(param);
            if (first) first = false;
            else sb.append(',');
            sb.append(pt.getAttribute("name"));
        }
        sb.append(')');
        for (Vertex tp : m.adjacences("typeParams")) {
            String[] split = ((String) tp.getAttribute("qualifiedName")).split("\\|");
            StringBuilder sb2 = new StringBuilder(split[0]);
            sb2.append(sb.toString());
            sb2.append('.');
            sb2.append(split[1]);
            String qn = sb2.toString();
            tp.setAttribute("qualifiedName", qn);
        }
    }

    private static Class reflectiveGetType(String qn) {
        try {
            return Class.forName(qn, false,
                Thread.currentThread().getContextClassLoader());
        } catch (ClassNotFoundException e) {
            // ignore
        } catch (NoClassDefFoundError e) {
            // ignore
        }
        List<String> l = new LinkedList<String>();
        l.addAll(nestedClassifierNames(qn));
        for (String qname : l) {
            try {
                return Class.forName(qname, false,
                    Thread.currentThread().getContextClassLoader());
            } catch (ClassNotFoundException e) {
                // ignore
            } catch (NoClassDefFoundError e) {
                // ignore
            }
        }
        return null;
    }

    private Vertex getOrCreateClassifierVertex(Class cls, StackElement ce) {
        assert (cls != null);

        String qn = cls.getCanonicalName();
        SymbolTableStack stck = (SymbolTableStack) #name2NamedElement#;

        // Maybe there is already an existing vertex for this type
        Vertex vx = stck.use(qn);
        if (vx != null) {
            return vx;
        }

        String type = null;
        if (cls.isAnnotation())
            type = "Annotation";
        else if (cls.isInterface())
            type = "Interface";
        else if (cls.isEnum())
            type = "Enum";
        else
            type = "Class";

        Vertex x = createVertex(getVertexClass(type), ce.getPosition());

        x.setAttribute("qualifiedName", qn);
        x.setAttribute("name", cls.getSimpleName());

        PSet<Modifiers> mods = JGraLab.set();
        int modifiers = cls.getModifiers();
        if (Modifier.isAbstract(modifiers) && !Modifier.isInterface(modifiers)) {
            mods = mods.plus(Modifiers.ABSTRACT);
        } else if (Modifier.isFinal(modifiers)) {
            mods = mods.plus(Modifiers.FINAL);
        } else if (Modifier.isPrivate(modifiers)) {
            mods = mods.plus(Modifiers.PRIVATE);
        } else if (Modifier.isProtected(modifiers)) {
            mods = mods.plus(Modifiers.PROTECTED);
        } else if (Modifier.isPublic(modifiers)) {
            mods = mods.plus(Modifiers.PUBLIC);
        } else if (Modifier.isStatic(modifiers)) {
            mods = mods.plus(Modifiers.STATIC);
        } else if (Modifier.isStrict(modifiers)) {
            mods = mods.plus(Modifiers.STRICTFP);
        }
        x.setAttribute("modifiers", mods);

        // Declare it in the symbol table!
        stck.declare(qn, x);
        return x;
    }

    private static List<String> nestedClassifierNames(String name) {
        List<String> l = new LinkedList<String>();
        StringBuilder sb = new StringBuilder(name);
        int idx = name.lastIndexOf('.');
        while (idx != -1) {
            sb.replace(idx, idx + 1, "$");
            name = sb.toString();
            l.add(name);
            idx = name.lastIndexOf('.');
        }
        return l;
    }

    private static String canonicalizeQName(Object typeSpec) {
        String tn = ((String) typeSpec);
        tn = tn.replaceAll("\\s+", " ");
        tn = tn.replaceAll("([,<>])\\s+", "$1");
        tn = tn.replaceAll("\\s+([,<>])", "$1");
        return tn.trim();
    }

    private Class findNestedClass(Class cls, String tn) {
        for (Class nested : cls.getDeclaredClasses()) {
            if (nested.isAnonymousClass()) {
                continue;
            }
            if (nested.getCanonicalName().endsWith("." + tn)) {
                return nested;
            }
            Class result = findNestedClass(nested, tn);
            if (result != null) {
                return result;
            }
        }
        return null;
    }

    private Class findClassInEnclosingClass(Class cls, String tn) {
        Class enclosing = cls.getEnclosingClass();
        if (enclosing == null) return null;
        if (enclosing.getCanonicalName().endsWith("." + tn)) {
            return enclosing;
        }
        // It could also be nested in the enclosing class
        Class result = findNestedClass(enclosing, tn);
        if (result != null) return result;
        return findClassInEnclosingClass(enclosing, tn);
    }

    private Vertex resolveClassifier(Object typeName, Object currentElement, Object expectedType) {
        Vertex x = resolveClassifier(typeName, currentElement);
        VertexClass expectedVC = getVertexClass((String) expectedType);
        if (x.getAttributedElementClass() != expectedVC) {
            if (x.isTemporary()) {
                TemporaryVertex tx = (TemporaryVertex) x;
                x = blessTemporaryVertex(tx, expectedVC,
                       (SymbolTableStack) #name2NamedElement#,
                       (SymbolTableStack) #importedClassifiers#,
                       (SymbolTableStack) #importedClassifiersQN#);
            } else {
                throw new RuntimeException("Expected classifier type " + expectedType
                    + " for classifier " + typeName + " but was "
                    + x.getAttributedElementClass()
                    + " (qualifiedName = " + x.getAttribute("qualifiedName") + ").");
            }
        }
        return x;
    }

    private Vertex resolveClassifier(Object typeName, Object currentElement) {
        StackElement ce = (StackElement) currentElement;
        final String tn = canonicalizeQName(typeName);

        // Is tn already fully qualified?
        String qn = tn;
        Class cls = reflectiveGetType(qn);
        if (cls != null) {
            return getOrCreateClassifierVertex(cls, ce);
        }

        // Is it this class itself?
        qn = curQName;
        final Class currentClass = reflectiveGetType(curQName);
        if (currentClass != null && currentClass.getCanonicalName().endsWith("." + tn)) {
           return getOrCreateClassifierVertex(currentClass, ce);
        }

        // Is it a class in the same package?
        qn = curPkgQName + "." + tn;
        cls = reflectiveGetType(qn);
        if (cls != null) {
            return getOrCreateClassifierVertex(cls, ce);
        }

        // Is it an imported class foo.bar.Baz?
        qn = tn;
        Vertex theClass = ((SymbolTableStack) #importedClassifiers#).use(qn);
        if (theClass != null) {
            return theClass;
        }

        // Is it a class nested in this class?
        if (currentClass != null) {
            cls = findNestedClass(currentClass, tn);
            if (cls != null) {
                return getOrCreateClassifierVertex(cls, ce);
            }
        }

        // Is the current class a nested class and we are looking for the
        // parent class or a neighbor nested class thereof?
        if (currentClass != null) {
            cls = findClassInEnclosingClass(currentClass, tn);
            if (cls != null) {
                return getOrCreateClassifierVertex(cls, ce);
            }
        }

        // Is it a class nested in some imported class? E.g., we imported
        // java.util.Map, so we may refer to java.util.Map$Entry with
        // Map.Entry.
        for (Object iqn : ((SymbolTableStack) #importedClassifiersQN#)
                          .getTop().getMap().keySet()) {
            String iqns = (String) iqn;
            int idx = iqns.lastIndexOf('.');
            qn = iqns.substring(0, idx + 1) + tn;
            cls = reflectiveGetType(qn);
            if (cls != null) {
                return getOrCreateClassifierVertex(cls, ce);
            }
        }

        // Is it a class nested in this classes' superclass or implemented
        // interfaces (transitively, including also the interfaces of
        // superclasses)?
        if (currentClass != null) {
            LinkedList<Class> supers = new LinkedList<Class>();
            Class superClass = currentClass.getSuperclass();
            if (superClass != null) { supers.offer(superClass); }
            for (Class iface : currentClass.getInterfaces()) { supers.offer(iface); }
            while (!supers.isEmpty()) {
                Class superType = supers.poll();
                cls = findNestedClass(superType, tn);
                if (cls != null) {
                    return getOrCreateClassifierVertex(cls, ce);
                }
                superClass = superType.getSuperclass();
                if (superClass != null) { supers.offer(superClass); }
                for (Class superIface : superType.getInterfaces()) {
                    supers.offer(superIface);
                }
            }
        }

        // Is it a class imported by a package import foo.bar.*?
        for (Object pn : ((SymbolTableStack) #importedPackages#)
                                     .getTop().getMap().keySet()) {
            qn = pn + "." + tn;
            cls = reflectiveGetType(qn);
            if (cls != null) {
                return getOrCreateClassifierVertex(cls, ce);
            }
        }

        // Is it a class from java.lang?
        qn = "java.lang." + tn;
        cls = reflectiveGetType(qn);
        if (cls != null) {
            return getOrCreateClassifierVertex(cls, ce);
        }

        System.err.println("Couldn't resolve type " + tn
            + " in " + curQName + " at position " + ce.getPosition() + ".");

        SymbolTableStack stck = (SymbolTableStack) #name2NamedElement#;
        qn = tn;
        Vertex v = stck.use(qn);
        if (v != null) {
            return v;
        }
        v = createTemporaryVertex(getVertexClass("Classifier"), ce.getPosition());
        v.setAttribute("name", qn);
        v.setAttribute("qualifiedName", qn);
        stck.declare(qn, v);
        return v;
    }
}

exports
  context-free start-symbols CompilationUnit
