module java/Types

imports
  java/Packages          %% PackageName
  java/Identifiers       %% Id

global actions
  pattern _ -> PrimType
    #$ = {return primTypes.get(#$0#);};#

exports
  sorts
    PrimType
    ArrayType
    ClassifierType
    TypeArg
    TypeParam

  context-free syntax

    %% Type
    rule PrimType       -> Type #$=$0;#
    rule ArrayType      -> Type #$=$0;#
    rule ClassifierType -> Type #$=$0;#

    %% Primitive types
    rule "boolean"                        -> PrimType
    rule "int"                            -> PrimType
    rule "long"                           -> PrimType
    rule "char"                           -> PrimType
    rule "byte"                           -> PrimType
    rule "short"                          -> PrimType
    rule "float"                          -> PrimType
    rule "double"                         -> PrimType
    rule "void"                           -> PrimType

    %% ArrayType
    rule Type ("[" "]")+                  -> ArrayType
    rule Type "..."
         #$ = ArrayType();
          $.name = $0.name.concat("[]");
          $.qualifiedName = $0.qualifiedName.concat("[]");
          $.dimensions = 1;
          HasElementType($, $0);#
         -> ArrayType

    %% ClassifierType
    rule Id                             -> PlainClassifierType
         %% This could be a simple name of a Classifier or a type parameter name.
         #{if (#typeParams.use($0)# != null)
               #$ = typeParams.use($0);#
           else
               #$ = {return resolveClassifier(#$0#, currentElement);};#}#
    rule PackageName "." Id             -> PlainClassifierType
         #$ = {return resolveClassifier(#$0.concat(".").concat($2)#, currentElement);};#
    rule PlainClassifierType -> ClassifierType #$ = $0;#
    rule #$ = ParametrizedType();#
         PlainClassifierType
         #HasGenericType($, $0);#
         "<" {(TypeArg #HasTypeArg($, $0);#) ","}+ ">"
         -> ClassifierType

    %% TypeArg
    rule Type                         -> TypeArg #$ = $0;#
    rule "?" #$ = WildcardType();
              $.name = "?";
              $.qualifiedName = "?";#
         ((UpperWildcardBound #HasUpperBound($, $0);#)
          | (LowerWildcardBound #HasLowerBound($, $0);#))? 
         -> TypeArg
    rule "extends" ClassifierType     -> UpperWildcardBound #$ = $1;#
    rule "super"   ClassifierType     -> LowerWildcardBound #$ = $1;#

    %% TypeParam
    rule Id
         #$ = TypeParameter();
          $.name = $0;
          $.qualifiedName = {return curQName + "." + #$0#;};
          typeParams.declare($.name, $);#
         ("extends" {(ClassifierType
                      #HasBound($, $0);#) "&"}+)?  -> TypeParam
