module java/Types

imports
  java/Packages          %% PackageName
  java/Identifiers       %% Id

global actions
  pattern _ -> PrimType
    #$ = {return primTypes.get(#$0#);};#

exports
  sorts
    PrimType
    ArrayType
    ClassifierType
    TypeArg
    TypeParam

  context-free syntax

    %% Type
    rule PrimType       -> Type #$=$0;#
    rule ArrayType      -> Type #$=$0;#
    rule ClassifierType -> Type #$=$0;#

    %% Primitive types
    rule "boolean"                        -> PrimType
    rule "int"                            -> PrimType
    rule "long"                           -> PrimType
    rule "char"                           -> PrimType
    rule "byte"                           -> PrimType
    rule "short"                          -> PrimType
    rule "float"                          -> PrimType
    rule "double"                         -> PrimType
    rule "void"                           -> PrimType

    %% ArrayType
    rule PrimType        -> NonArrayType #$=$0;#
    rule ClassifierType  -> NonArrayType #$=$0;#
    rule NonArrayType #$elemType = $0; %% HasElementType($, $0);
                       $name = $0.name;
                       $qualifiedName = $0.qualifiedName;
                       $dims = 0;#
         ("[" "]" #$dims = {return ((Integer) #$dims#) + 1;};
                   $name = $name.concat("[]");
                   $qualifiedName = $qualifiedName.concat("[]");#)+
         -> ArrayType #$ = name2NamedElement.useOrDeclare($qualifiedName, "ArrayType");
                       $.name = $name;
                       $.qualifiedName = $qualifiedName;
                       $.dimensions = $dims;
                       HasElementType($, $0);#
    rule NonArrayType "..."
         #$qualifiedName = $0.qualifiedName.concat("[]");
          $ = name2NamedElement.useOrDeclare($qualifiedName, "ArrayType");
          $.qualifiedName = $qualifiedName;
          $.name = $0.name.concat("[]");
          $dimensions = 1;
          HasElementType($, $0);#
         -> ArrayType

    %% ClassifierType
    rule Id                             -> PlainClassifierType
         %% This could be a simple name of a Classifier or a type parameter name.
         #{if (#typeParams.use($0)# != null)
               #$ = typeParams.use($0);#
           else
               #$ = {return resolveClassifier(#$0#, currentElement);};#}#
    rule PackageName "." Id             -> PlainClassifierType
         #$ = {return resolveClassifier(#$0.concat(".").concat($2)#, currentElement);};#
    rule PlainClassifierType -> ClassifierType #$ = $0;#
    rule PlainClassifierType
         #$qname = $0.qualifiedName.concat("<");
          $name = $0.name.concat("<");
          $typeArgs = list();#
         "<" {(TypeArg #$typeArgs.add($0);
                        $qname = $qname.concat($0.qualifiedName);
                        $name = $name.concat($0.name);#)
              "," #$qname = $qname.concat(",");
                   $name = $name.concat(",");#}+ ">"
         -> ClassifierType
            #$qname = $qname.concat(">");
             $name = $name.concat(">");
             $ = name2NamedElement.useOrDeclare($qname, "ParametrizedType");
             HasGenericType($, $0);
             HasTypeArg($, $typeArgs);
             $.name = $name;
             $.qualifiedName = $qname;#

    %% TypeArg
    rule Type                         -> TypeArg #$ = $0;#
    rule "?" #$ = WildcardType();
              $.name = "?";
              $.qualifiedName = "?";#
         ((UpperWildcardBound
           #HasUpperBound($, $0);
            $.qualifiedName = $.qualifiedName.concat(" extends ")
                               .concat($0.qualifiedName);
            $.name = $.name.concat(" extends ").concat($0.name);#)
          | (LowerWildcardBound
             #HasLowerBound($, $0);
              $.qualifiedName = $.qualifiedName.concat(" super ")
                                 .concat($0.qualifiedName);
              $.name = $.name.concat(" super ").concat($0.name);#))?
         -> TypeArg
    rule "extends" Type     -> UpperWildcardBound #$ = $1;#
    rule "super"   Type     -> LowerWildcardBound #$ = $1;#

    %% TypeParam
    rule Id
         %% The typeParams have already been declared by initTypeParamsSymbolTable()
         #$ = typeParams.use($0);#
         ("extends" {(Type #HasBound($, $0);#) "&"}+)?  -> TypeParam
