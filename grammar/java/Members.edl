module java/Members
imports
  java/Modifiers         %% Modifier
  java/Identifiers       %% Id
  java/Types             %% Type, TypeParam
  java/CharacterLiterals %% CharLiteral
  java/StringLiterals    %% StringLiteral
  java/Comments          %% Comment
  java/Annotations       %% Annotation

exports
  sorts
    Member
    InitializerBlock
    AnnotationElementDecl
    EnumConstant

  context-free restrictions

    %% To distinguish enum constants "FOO(12)," from constructors
    LastEnumConstant -/- [\{]

  context-free syntax

    %% EnumConstant
    rule {EnumConst ","}* ","? -> EnumConstants
    rule Annotation* Id ParenBlock? ClassifierBody? -> EnumConst
         #$=EnumConst();
          $.name = lexem($1);
          $classifier = {return resolveClassifier(curQName, currentElement);};
          DeclaresEnumConst($classifier, $);#

    %% AnnotationElementDecl
    rule #$mods = set();
          $annos = set();#
         ((Modifier #$mods.add($0);#)|(Annotation #$annos.add($0);#))*
         Type Id
         #$=AnnotationElement();
          HasType($, $1);
          $.modifiers = $mods;
          {addAnnotations(#$#, #$annos#);};
          $.name = lexem($2);
          $classifier = {return resolveClassifier(curQName, currentElement);};
          DeclaresAnnotationElement($classifier, $);#
         "(" ")" AnnoInitializer? ";" -> AnnotationElementDecl

    %% FieldDeclaration
    rule #$mods = set();
          $annos = set();#
         ((Modifier #$mods.add($0);#)|(Annotation #$annos.add($0);#))*
         (Type #$type = $0;#)
         {(Id
      #$baseType = $type;
       $name = $type.name;
       $qualifiedName = $type.qualifiedName;#
      ("[" "]"
       #$name = $name.concat("[]");
        $qualifiedName = $qualifiedName.concat("[]");
        $prevType = $type;
        $type = name2NamedElement.useOrDeclare($qualifiedName, "ArrayType");
        $type.name = $name;
        $type.qualifiedName = $qualifiedName;
        {
         if (((Vertex) #$type#).getDegree(getEdgeClass("HasElementType"), EdgeDirection.OUT) == 0) {
           #HasElementType($type, $prevType);#
         }
        }#
      )* 
          #$=Field();
           HasType($, $type);
           $.modifiers = $mods;
           $.name = $0;
           $classifier = {return resolveClassifier(curQName, currentElement);};
           {addAnnotations(#$#, #$annos#);};
           DeclaresField($classifier, $);
           $type = $baseType;#
      ) ","}+
         Initializer? ";"
         -> FieldDeclaration
    rule FieldDeclaration -> Member

    %% MethodDeclaration
    @Symboltable{typeParams}
    rule #$=Method();
          $mods = set();
          $annos = set();#
         ((Modifier #$mods.add($0);#)|(Annotation #$annos.add($0);#))*
         ("<" #{initTypeParamsSymbolTable(currentElement, true);}#
          {(TypeParam #HasTypeParam($, $0);#) ","}+ ">")?
         Type Id
     #$name = $2.name;
      $qualifiedName = $2.qualifiedName;
      $resultType = $2;
      $.modifiers = $mods;
      $.name = lexem($3);
      $classifier = {return resolveClassifier(curQName, currentElement);};
      {addAnnotations(#$#, #$annos#);};
      $params = list();#
         "(" {(ParamDeclaration #$params.add($0);#) ","}* ")"
     ("[" "]"
      #$name = $name.concat("[]");
       $qualifiedName = $qualifiedName.concat("[]");
       $prevResultType = $resultType;
       $resultType = name2NamedElement.useOrDeclare($qualifiedName, "ArrayType");
       $resultType.name = $name;
       $resultType.qualifiedName = $qualifiedName;
      {
       if (((Vertex) #$resultType#).getDegree(getEdgeClass("HasElementType"), EdgeDirection.OUT) == 0) {
         #HasElementType($resultType, $prevResultType);#
       }
      }#
     )* 
     #HasType($, $resultType);
      DeclaresMethod($classifier, $);
      HasParam($, $params);#
     ("throws" {(Type #Throws($, $0);#) ","}+)?
     (Block | ";")
     -> MethodDeclaration #{recalcMethodTypeParamQNames(#$#);}#

    %% ParamDeclaration
    rule #$mods = set();
          $annos = set();#
         ((Modifier #$mods.add($0);#)|(Annotation #$annos.add($0);#))*
         Type Id
     #$name = $1.name;
      $qualifiedName = $1.qualifiedName;
      $resultType = $1;#
     ("[" "]"
     #$name = $name.concat("[]");
      $qualifiedName = $qualifiedName.concat("[]");
      $prevResultType = $resultType;
      $resultType = name2NamedElement.useOrDeclare($qualifiedName, "ArrayType");
      $resultType.name = $name;
      $resultType.qualifiedName = $qualifiedName;
      {
       if (((Vertex) #$resultType#).getDegree(getEdgeClass("HasElementType"), EdgeDirection.OUT) == 0) {
         #HasElementType($resultType, $prevResultType);#
       }
      }#
     )*
         #$ = Parameter();
          HasType($, $resultType);
          $.modifiers = $mods;
          {addAnnotations(#$#, #$annos#);};
          $.name = $2;#
         -> ParamDeclaration
    rule MethodDeclaration -> Member

    %% ConstructorDeclaration
    @Symboltable{typeParams}
    rule #$=Constructor();
          $mods = set();
          $annos = set();#
         ((Modifier #$mods.add($0);#) | Annotation)*
         ("<" #{initTypeParamsSymbolTable(currentElement, true);}#
          {(TypeParam #HasTypeParam($, $0);#) ","}+ ">")?
         Id
         #$.modifiers = $mods;
          $.name = $2;
          $classifier = {return resolveClassifier(curQName, currentElement);};
          {addAnnotations(#$#, #$annos#);};
          DeclaresConstructor($classifier, $);#
         "(" {(ParamDeclaration #HasParam($, $0);#) ","}* ")"
         ("throws" {(Type #Throws($, $0);#) ","}+)?
         Block
         -> ConstructorDeclaration
    rule ConstructorDeclaration -> Member

    %% StaticInitializer
    rule "static" Block                            -> StaticInitializer
    rule StaticInitializer                         -> InitializerBlock

    %% InstanceInitializer
    rule Block                                     -> InstanceInitializer
    rule InstanceInitializer                       -> InitializerBlock

  lexical syntax
    rule "{" BlockContent* "}"                     -> Block
    rule ~[\"\'\/\ \t\12\n\r\{\}\(\)]              -> BlockContent
    rule Block                                     -> BlockContent
    rule ParenBlock                                -> BlockContent

    rule "(" ParenBlockContent* ")"                -> ParenBlock
    rule ~[\"\'\/\ \t\12\n\r\(\)\{\}]              -> ParenBlockContent
    rule ParenBlock                                -> ParenBlockContent
    rule Block                                     -> ParenBlockContent

    rule "default" InitializerContent+             -> AnnoInitializer
    rule "=" InitializerContent+                   -> Initializer
    rule Block                                     -> InitializerContent
    rule ParenBlock                                -> InitializerContent
    rule ~[\"\'\/\ \t\12\n\r\;\(\)\{\}]            -> InitializerContent

    rule [\/]                                      -> Slash
    rule StringLiteral                             -> Content
    rule CharLiteral                               -> Content
    rule (Slash | LAYOUT)                          -> Content
    rule Content                                   -> BlockContent
    rule Content                                   -> ParenBlockContent
    rule Content                                   -> InitializerContent

  lexical restrictions
    Initializer      -/- ~[\;]
    Slash            -/- [\/\*]
    AnnoInitializer  -/- ~[\;]
