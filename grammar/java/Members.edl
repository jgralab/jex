module java/Members
imports
  java/Modifiers         %% Modifier
  java/Identifiers       %% Id
  java/Names             %% TypeSpec, TypeParams
  java/CharacterLiterals %% CharLiteral
  java/StringLiterals    %% StringLiteral
  java/Comments          %% Comment

exports
  sorts
    Member
    InitializerBlock
    AnnotationElementDecl
    EnumConstant

  context-free syntax

    %% EnumConstant
    rule EnumConst "," (LeadingEnumConstant | LastEnumConstant) -> LeadingEnumConstant
    rule EnumConst ";"?                                         -> LastEnumConstant
    rule Id ParenBlock?                                         -> EnumConst
         #$=EnumConst();
          $.name = lexem($0);
          $.qualifiedName = {return curQName + "." + #$.name#;};
          name2Member.declare($.name, $);#
    rule LeadingEnumConstant                                    -> EnumConstant
    rule LastEnumConstant                                       -> EnumConstant

    %% AnnotationElementDecl
    rule #$mods = set();#
         ((Modifier #$mods.add($0);#)| Annotation)*
         TypeSpec Id
         #$=AnnotationElement();
          $type = {return resolveType(#lexem($1)#, currentElement);};
          HasType($, $type);
          $.modifiers = $mods;
          $.name = lexem($2);
          $.qualifiedName = {return curQName + "." + #lexem($2)#;};
          name2NamedElement.declare($.qualifiedName, $);
          name2Member.declare($.name, $);#
         "(" ")" AnnoInitializer? ";" -> AnnotationElementDecl

    %% FieldDeclaration
    rule (Modifier | Annotation)* TypeSpec Id Initializer? ";"
         -> FieldDeclaration
    rule FieldDeclaration -> Member

    %% MethodDeclaration
    rule (Modifier | Annotation)* TypeParams? TypeSpec Id "(" {ParamDeclaration ","}* ")"
         ThrowsClause? (Block | ";" | (Block ";"))
         -> MethodDeclaration
    rule (Modifier | Annotation)* TypeSpec Id -> ParamDeclaration
    rule MethodDeclaration -> Member

    %% ConstructorDeclaration
    rule (Modifier | Annotation)* Id "(" {ParamDeclaration ","}* ")" ThrowsClause? Block
         -> ConstructorDeclaration
    rule ConstructorDeclaration -> Member

    %% ThrowsClause
    rule "throws" {TypeSpec ","}+                  -> ThrowsClause

    %% StaticInitializer
    rule "static" Block ";"?                       -> StaticInitializer
    rule StaticInitializer                         -> InitializerBlock

    %% InstanceInitializer
    rule Block ";"?                                -> InstanceInitializer
    rule InstanceInitializer                       -> InitializerBlock

  lexical syntax
    rule "{" BlockContent* "}"                     -> Block
    rule ~[\"\'\/\ \t\12\n\r\{\}\(\)]              -> BlockContent
    rule Block                                     -> BlockContent
    rule ParenBlock                                -> BlockContent

    rule "(" ParenBlockContent* ")"                -> ParenBlock
    rule ~[\"\'\/\ \t\12\n\r\(\)\{\}]              -> ParenBlockContent
    rule ParenBlock                                -> ParenBlockContent
    rule Block                                     -> ParenBlockContent

    rule "default" InitializerContent+             -> AnnoInitializer
    rule "=" InitializerContent+                   -> Initializer
    rule Block                                     -> InitializerContent
    rule ParenBlock                                -> InitializerContent
    rule ~[\"\'\/\ \t\12\n\r\;\(\)\{\}]            -> InitializerContent

    rule [\/]                                      -> Slash
    rule StringLiteral                             -> Content
    rule CharLiteral                               -> Content
    rule (Slash | LAYOUT)                          -> Content
    rule Content                                   -> BlockContent
    rule Content                                   -> ParenBlockContent
    rule Content                                   -> InitializerContent

  lexical restrictions
    Initializer      -/- ~[\;]
    Slash            -/- [\/\*]
    AnnoInitializer  -/- ~[\;]
