module java/Members
imports
  java/Modifiers         %% Modifier
  java/Identifiers       %% Id
  java/Types             %% Type, TypeParam
  java/CharacterLiterals %% CharLiteral
  java/StringLiterals    %% StringLiteral
  java/Comments          %% Comment

exports
  sorts
    Member
    InitializerBlock
    AnnotationElementDecl
    EnumConstant

  context-free syntax

    %% EnumConstant
    rule EnumConst "," (LeadingEnumConstant | LastEnumConstant) -> LeadingEnumConstant
    rule EnumConst ";"?                                         -> LastEnumConstant
    rule Id ParenBlock?                                         -> EnumConst
         #$=EnumConst();
          $.name = lexem($0);
          $classifier = {return resolveClassifier(curQName, currentElement);};
          DeclaresEnumConst($classifier, $);#
    rule LeadingEnumConstant                                    -> EnumConstant
    rule LastEnumConstant                                       -> EnumConstant

    %% AnnotationElementDecl
    rule #$mods = set();#
         ((Modifier #$mods.add($0);#)| Annotation)*
         Type Id
         #$=AnnotationElement();
          HasType($, $1);
          $.modifiers = $mods;
          $.name = lexem($2);
          $classifier = {return resolveClassifier(curQName, currentElement);};
          DeclaresAnnotationElement($classifier, $);#
         "(" ")" AnnoInitializer? ";" -> AnnotationElementDecl

    %% FieldDeclaration
    rule #$mods = set();#
         ((Modifier #$mods.add($0);#) | Annotation)*
         (Type #$type = $0;#)
         {(Id #$field=Field();
               HasType($field, $type);
               $field.modifiers = $mods;
               $field.name = $0;
               $classifier = {return resolveClassifier(curQName, currentElement);};
               DeclaresField($classifier, $field);#) ","}+
         Initializer? ";"
         -> FieldDeclaration
    rule FieldDeclaration -> Member

    %% MethodDeclaration
    @Symboltable{typeParams}
    rule #$=Method();
          $mods = set();#
         ((Modifier #$mods.add($0);#) | Annotation)*
         ("<" #{initTypeParamsSymbolTable(currentElement, true);}#
          {(TypeParam #HasTypeParam($, $0);#) ","}+ ">")?
         Type Id
         #HasType($, $2);
          $.modifiers = $mods;
          $.name = lexem($3);
          $classifier = {return resolveClassifier(curQName, currentElement);};
          DeclaresMethod($classifier, $);#
         "(" {(ParamDeclaration #HasParam($, $0);#) ","}* ")"
         ("throws" {(Type #Throws($, $0);#) ","}+)?
         (Block | ";" | (Block ";"))
         -> MethodDeclaration #{recalcMethodTypeParamQNames(#$#);}#

    %% ParamDeclaration
    rule #$mods = set();#
         ((Modifier #$mods.add($0);#)| Annotation)*
         Type Id
         #$ = Parameter();
          HasType($, $1);
          $.modifiers = $mods;
          $.name = $2;#
         -> ParamDeclaration
    rule MethodDeclaration -> Member

    %% ConstructorDeclaration
    @Symboltable{typeParams}
    rule #$=Constructor();
          $mods = set();#
         ((Modifier #$mods.add($0);#) | Annotation)*
         ("<" #{initTypeParamsSymbolTable(currentElement, true);}#
          {(TypeParam #HasTypeParam($, $0);#) ","}+ ">")?
         Id
         #$.modifiers = $mods;
          $.name = lexem($1);
          $classifier = {return resolveClassifier(curQName, currentElement);};
          DeclaresConstructor($classifier, $);#
         "(" {(ParamDeclaration #HasParam($, $0);#) ","}* ")"
         ("throws" {(Type #Throws($, $0);#) ","}+)?
         Block ";"?
         -> ConstructorDeclaration
    rule ConstructorDeclaration -> Member

    %% StaticInitializer
    rule "static" Block ";"?                       -> StaticInitializer
    rule StaticInitializer                         -> InitializerBlock

    %% InstanceInitializer
    rule Block ";"?                                -> InstanceInitializer
    rule InstanceInitializer                       -> InitializerBlock

  lexical syntax
    rule "{" BlockContent* "}"                     -> Block
    rule ~[\"\'\/\ \t\12\n\r\{\}\(\)]              -> BlockContent
    rule Block                                     -> BlockContent
    rule ParenBlock                                -> BlockContent

    rule "(" ParenBlockContent* ")"                -> ParenBlock
    rule ~[\"\'\/\ \t\12\n\r\(\)\{\}]              -> ParenBlockContent
    rule ParenBlock                                -> ParenBlockContent
    rule Block                                     -> ParenBlockContent

    rule "default" InitializerContent+             -> AnnoInitializer
    rule "=" InitializerContent+                   -> Initializer
    rule Block                                     -> InitializerContent
    rule ParenBlock                                -> InitializerContent
    rule ~[\"\'\/\ \t\12\n\r\;\(\)\{\}]            -> InitializerContent

    rule [\/]                                      -> Slash
    rule StringLiteral                             -> Content
    rule CharLiteral                               -> Content
    rule (Slash | LAYOUT)                          -> Content
    rule Content                                   -> BlockContent
    rule Content                                   -> ParenBlockContent
    rule Content                                   -> InitializerContent

  lexical restrictions
    Initializer      -/- ~[\;]
    Slash            -/- [\/\*]
    AnnoInitializer  -/- ~[\;]
