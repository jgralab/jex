module java/Names
imports
  java/Identifiers

user code{
  private boolean isContainsPackageAlreadyCreated(Vertex parentPackage, Vertex pack) {
    for (Edge edge: pack.incidences(getEdgeClass("ContainsPackage"), EdgeDirection.IN)) {
      if (edge.getThat() == parentPackage) {
        return true;
      }
    }
    return false;
  }
}

exports
  sorts
    TypeSpec
    TypeParams
    PackageName
    RefTypeName
    TypeName

  context-free syntax

    rule "<" {TypeParamName ","}+ ">"                -> TypeParams
    rule ("?" | RefTypeName) TypeParams?             -> TypeParamName
    rule ("?" | RefTypeName) "extends" TypeParamName -> TypeParamName
    rule ("?" | RefTypeName) "super" TypeParamName   -> TypeParamName

    rule TypeName                          -> TypeSpec
    rule ArrayType                         -> TypeSpec
    rule RefTypeName TypeParams            -> TypeSpec

    %% PackageName
    rule #$qualName = "";
          $parentPackage = {return defaultPackage;};#
          {
            Id #{if (isPackageDeclaration) {
              #$qualName = $qualName.concat(lexem($0));
               $package = name2Package.use($qualName);#
               if (#$package#==null) {#
                 $package = Package();
                 $package.name = lexem($0);
                 $package.qualifiedName = $qualName;
                 $package = name2Package.declare($qualName, $package);#
               }
               if (!isContainsPackageAlreadyCreated((Vertex) #$parentPackage#,
                     (Vertex) #$package#)) {
                 #ContainsPackage($parentPackage, $package);#
               }
               #$parentPackage = $package;#
             }
           }#
           "." #$qualName = $qualName.concat(".");#
         }+ -> PackageName

    rule RefTypeName                      -> TypeName
    rule PrimType                         -> TypeName

    rule TypeName ("[" "]")+              -> ArrayType
    rule TypeName "..."                   -> ArrayType

    %% Reference types
    rule Id                               -> RefTypeName
    rule PackageName "." Id               -> RefTypeName

    %% Primitive types
    rule "boolean"                        -> PrimType
    rule "int"                            -> PrimType
    rule "long"                           -> PrimType
    rule "char"                           -> PrimType
    rule "byte"                           -> PrimType
    rule "short"                          -> PrimType
    rule "float"                          -> PrimType
    rule "double"                         -> PrimType
    rule "void"                           -> PrimType
